// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Especifica el generador de cliente de Prisma.
generator client {
  provider = "prisma-client-js"
}

// Configura la fuente de datos (tu base de datos PostgreSQL).
// La URL se carga desde el archivo .env.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Definición de Modelos ---

model Estudiante {
  id_estudiante    Int           @id @default(autoincrement())
  nombres          String
  apellidos        String
  cedula           String        @unique
  email            String        @unique
  fecha_nacimiento DateTime?     @db.Date
  
  // Relación: Un estudiante puede tener muchas inscripciones.
  inscripciones    Inscripcion[]

  @@map("estudiantes") // Nombre de la tabla en la base de datos
}

model Carrera {
  id_carrera          Int      @id @default(autoincrement())
  nombre_carrera      String   @unique
  descripcion         String?
  duracion_semestres  Int?

  // Relación: Una carrera tiene muchas materias.
  materias            Materia[]

  @@map("carreras")
}

model Profesor {
  id_profesor        Int               @id @default(autoincrement())
  nombres            String
  apellidos          String
  cedula             String            @unique
  email              String            @unique
  titulos            Titulo[]
  materias_asignadas ProfesorMateria[]

  @@map("profesores")
}

model Titulo {
  id_titulo           Int       @id @default(autoincrement())
  nombre_titulo       String
  universidad_emisora String?
  fecha_obtencion     DateTime? @db.Date
  
  // Relación: Un título pertenece a un profesor.
  profesor            Profesor  @relation(fields: [id_profesor], references: [id_profesor])
  id_profesor         Int

  @@map("titulos")
}

model Aula {
  id_aula     Int     @id @default(autoincrement())
  numero_aula String
  edificio    String?
  capacidad   Int?
  materia     Materia?

  @@map("aulas")
}

model Materia {
  id_materia        Int               @id @default(autoincrement())
  nombre_materia    String
  creditos          Int
  id_carrera        Int
  carrera           Carrera           @relation(fields: [id_carrera], references: [id_carrera])
  id_aula           Int               @unique
  aula              Aula              @relation(fields: [id_aula], references: [id_aula])
  inscripciones     Inscripcion[]
  profesores_asignados ProfesorMateria[]

  @@map("materias")
}


// --- Modelos para Tablas de Relación (Pivote) ---

model Inscripcion {
  id_inscripcion    Int       @id @default(autoincrement())
  fecha_inscripcion DateTime  @default(now())
  semestre          String?
  calificacion_final Decimal?  @db.Decimal(4, 2)
  id_estudiante     Int
  estudiante        Estudiante @relation(fields: [id_estudiante], references: [id_estudiante])
  id_materia        Int
  materia           Materia   @relation(fields: [id_materia], references: [id_materia])
  @@unique([id_estudiante, id_materia], name: "idx_estudiante_materia_unica")
  @@map("inscripciones")
}

model ProfesorMateria {
  // Relación: La asignación involucra a un profesor.
  id_profesor Int
  profesor    Profesor @relation(fields: [id_profesor], references: [id_profesor])
  
  // Relación: La asignación involucra a una materia.
  id_materia  Int
  materia     Materia  @relation(fields: [id_materia], references: [id_materia])

  // Define una llave primaria compuesta para la relación muchos a muchos.
  @@id([id_profesor, id_materia])
  @@map("profesor_materia")
}
